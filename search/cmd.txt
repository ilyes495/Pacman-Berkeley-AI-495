Starting on 11-3 at 4:40:20

Question q1
===========

*** PASS: test_cases\q1\graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'D', 'C']
*** PASS: test_cases\q1\graph_bfs_vs_dfs.test
*** 	solution:		['2:A->D', '0:D->G']
*** 	expanded_states:	['A', 'D']
*** PASS: test_cases\q1\graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases\q1\graph_manypaths.test
*** 	solution:		['2:A->B2', '0:B2->C', '0:C->D', '2:D->E2', '0:E2->F', '0:F->G']
*** 	expanded_states:	['A', 'B2', 'C', 'D', 'E2', 'F']
*** PASS: test_cases\q1\pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 130
*** 	nodes expanded:		146

### Question q1: 3/3 ###


Question q2
===========

*** PASS: test_cases\q2\graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases\q2\graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
*** PASS: test_cases\q2\graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases\q2\graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** PASS: test_cases\q2\pacman_1.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269

### Question q2: 3/3 ###


Question q3
===========

[('B', 1.0), ('C', 2.0), ('D', 4.0), ('G', 8.0)]
*** PASS: test_cases\q3\graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
[('B', 1.0), ('G', 2.0), ('D', 4.0), ('D', 8.0)]
*** PASS: test_cases\q3\graph_bfs_vs_dfs.test
*** 	solution:		['1:A->G']
*** 	expanded_states:	['A', 'B']
[('B', 1.0), ('A', 2.0), ('C', 4.0), ('A', 8.0), ('G', 16.0), ('B', 32.0)]
*** PASS: test_cases\q3\graph_infinite.test
*** 	solution:		['0:A->B', '1:B->C', '1:C->G']
*** 	expanded_states:	['A', 'B', 'C']
[('B1', 1.0), ('C', 2.0), ('B2', 4.0), ('C', 8.0), ('D', 32.0), ('C', 16.0), ('E1', 64.0), ('F', 128.0), ('E2', 256.0), ('F', 512.0), ('G', 2048.0), ('F', 1024.0)]
*** PASS: test_cases\q3\graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
[('B', 2.0), ('H', 4.0), ('D', 1.0), ('C', 2.0), ('A', 2.0), ('E', 2.5), ('F', 2.0), ('G', 1.5), ('B', 2.0)]
*** FAIL: test_cases\q3\ucs_0_graph.test
*** 	graph:
*** 	              C
*** 	              ^
*** 	              | 2
*** 	         2    V   4 
*** 	    *A <----> B -----> [H]
*** 	              |1 
*** 	         1.5  V  2.5
*** 	     G <----- D -----> E
*** 	              |
*** 	            2 | 
*** 	              V
*** 	             [F]
*** 	    
*** 	    A is the start state, F and H is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	student solution:		['Right', 'Down', 'Down']
*** 	student expanded_states:	['A', 'B', 'D', 'G', 'C']
*** 
*** 	correct solution:		['Right', 'Down', 'Down']
*** 	correct expanded_states:	['A', 'B', 'D', 'C', 'G']
*** 	correct rev_solution:		['Right', 'Down', 'Down']
*** 	correct rev_expanded_states:	['A', 'B', 'D', 'C', 'G']
[((34, 15), 1), ((33, 16), 1), ((34, 16), 1), ((34, 14), 1), ((34, 16), 1), ((32, 16), 1), ((34, 15), 1), ((33, 14), 1), ((33, 16), 1), ((31, 16), 1), ((34, 14), 1), ((32, 14), 1), ((32, 16), 1), ((30, 16), 1), ((33, 14), 1), ((31, 14), 1), ((31, 16), 1), ((29, 16), 1), ((32, 14), 1), ((30, 14), 1), ((30, 16), 1), ((28, 16), 1), ((30, 13), 1), ((31, 14), 1), ((29, 16), 1), ((27, 16), 1), ((30, 14), 1), ((30, 12), 1), ((28, 16), 1), ((26, 16), 1), ((30, 13), 1), ((31, 12), 1), ((27, 16), 1), ((25, 16), 1), ((32, 12), 1), ((30, 12), 1), ((25, 15), 1), ((26, 16), 1), ((24, 16), 1), ((33, 12), 1), ((31, 12), 1), ((25, 16), 1), ((25, 14), 1), ((25, 16), 1), ((23, 16), 1), ((34, 12), 1), ((32, 12), 1), ((25, 15), 1), ((26, 14), 1), ((24, 16), 1), ((22, 16), 1), ((34, 11), 1), ((33, 12), 1), ((27, 14), 1), ((25, 14), 1), ((23, 16), 1), ((21, 16), 1), ((34, 12), 1), ((34, 10), 1), ((27, 13), 1), ((26, 14), 1), ((22, 16), 1), ((20, 16), 1), ((34, 11), 1), ((33, 10), 1), ((27, 14), 1), ((27, 12), 1), ((21, 16), 1), ((19, 16), 1), ((34, 10), 1), ((32, 10), 1), ((27, 13), 1), ((27, 11), 1), ((20, 16), 1), ((18, 16), 1), ((33, 10), 1), ((31, 10), 1), ((27, 12), 1), ((26, 11), 1), ((19, 16), 1), ((17, 16), 1), ((32, 10), 1), ((30, 10), 1), ((27, 11), 1), ((25, 11), 1), ((18, 16), 1), ((16, 16), 1), ((30, 9), 1), ((31, 10), 1), ((29, 10), 1), ((26, 11), 1), ((24, 11), 1), ((17, 16), 1), ((15, 16), 1), ((30, 10), 1), ((30, 8), 1), ((30, 10), 1), ((24, 12), 1), ((25, 11), 1), ((16, 16), 1), ((14, 16), 1), ((30, 9), 1), ((31, 8), 1), ((24, 11), 1), ((23, 12), 1), ((15, 16), 1), ((13, 16), 1), ((32, 8), 1), ((30, 8), 1), ((24, 12), 1), ((22, 12), 1), ((14, 16), 1), ((12, 16), 1), ((33, 8), 1), ((31, 8), 1), ((23, 12), 1), ((21, 12), 1), ((13, 16), 1), ((11, 16), 1), ((34, 8), 1), ((32, 8), 1), ((22, 12), 1), ((20, 12), 1), ((12, 16), 1), ((10, 16), 1), ((34, 7), 1), ((33, 8), 1), ((20, 11), 1), ((21, 12), 1), ((19, 12), 1), ((11, 16), 1), ((9, 16), 1), ((34, 8), 1), ((34, 6), 1), ((20, 12), 1), ((20, 10), 1), ((19, 11), 1), ((19, 11), 1), ((20, 12), 1), ((18, 12), 1), ((10, 16), 1), ((8, 16), 1), ((34, 7), 1), ((33, 6), 1), ((20, 11), 1), ((20, 9), 1), ((19, 12), 1), ((20, 11), 1), ((19, 12), 1), ((17, 12), 1), ((9, 16), 1), ((7, 16), 1), ((34, 6), 1), ((32, 6), 1), ((20, 10), 1), ((21, 9), 1), ((17, 13), 1), ((18, 12), 1), ((16, 12), 1), ((8, 16), 1), ((6, 16), 1), ((33, 6), 1), ((31, 6), 1), ((22, 9), 1), ((20, 9), 1), ((17, 14), 1), ((17, 12), 1), ((17, 12), 1), ((15, 12), 1), ((7, 16), 1), ((5, 16), 1), ((32, 6), 1), ((30, 6), 1), ((23, 9), 1), ((21, 9), 1), ((17, 13), 1), ((16, 14), 1), ((16, 12), 1), ((14, 12), 1), ((6, 16), 1), ((4, 16), 1), ((30, 5), 1), ((31, 6), 1), ((29, 6), 1), ((24, 9), 1), ((22, 9), 1), ((17, 14), 1), ((15, 14), 1), ((14, 11), 1), ((15, 12), 1), ((13, 12), 1), ((5, 16), 1), ((3, 16), 1), ((30, 6), 1), ((30, 4), 1), ((30, 6), 1), ((25, 9), 1), ((23, 9), 1), ((16, 14), 1), ((14, 14), 1), ((14, 12), 1), ((14, 10), 1), ((14, 12), 1), ((12, 12), 1), ((4, 16), 1), ((2, 16), 1), ((30, 5), 1), ((30, 3), 1), ((31, 4), 1), ((26, 9), 1), ((24, 9), 1), ((15, 14), 1), ((13, 14), 1), ((14, 11), 1), ((15, 10), 1), ((12, 13), 1), ((12, 11), 1), ((13, 12), 1), ((3, 16), 1), ((1, 16), 1), ((30, 4), 1), ((31, 3), 1), ((31, 3), 1), ((32, 4), 1), ((30, 4), 1), ((27, 9), 1), ((25, 9), 1), ((14, 14), 1), ((12, 14), 1), ((16, 10), 1), ((14, 10), 1), ((12, 14), 1), ((12, 12), 1), ((12, 12), 1), ((12, 10), 1), ((1, 15), 1), ((2, 16), 1), ((31, 4), 1), ((30, 3), 1), ((33, 4), 1), ((31, 4), 1), ((27, 8), 1), ((26, 9), 1), ((12, 13), 1), ((13, 14), 1), ((17, 10), 1), ((15, 10), 1), ((12, 11), 1), ((11, 10), 1), ((1, 16), 1), ((1, 14), 1), ((34, 4), 1), ((32, 4), 1), ((27, 9), 1), ((27, 7), 1), ((17, 9), 1), ((16, 10), 1), ((12, 10), 1), ((10, 10), 1), ((1, 15), 1), ((1, 13), 1), ((34, 3), 1), ((33, 4), 1), ((27, 8), 1), ((27, 6), 1), ((17, 10), 1), ((17, 8), 1), ((10, 11), 1), ((11, 10), 1), ((1, 14), 1), ((1, 12), 1), ((34, 4), 1), ((34, 2), 1), ((27, 7), 1), ((27, 5), 1), ((17, 9), 1), ((16, 8), 1), ((10, 12), 1), ((10, 10), 1), ((1, 13), 1), ((1, 11), 1), ((34, 3), 1), ((34, 1), 1), ((27, 6), 1), ((27, 4), 1), ((17, 8), 1), ((15, 8), 1), ((10, 13), 1), ((10, 11), 1), ((1, 12), 1), ((1, 10), 1), ((34, 2), 1), ((33, 1), 1), ((27, 5), 1), ((27, 3), 1), ((16, 8), 1), ((14, 8), 1), ((10, 14), 1), ((10, 12), 1), ((1, 11), 1), ((1, 9), 1), ((34, 1), 1), ((32, 1), 1), ((27, 4), 1), ((27, 2), 1), ((15, 8), 1), ((13, 8), 1), ((10, 13), 1), ((9, 14), 1), ((1, 10), 1), ((1, 8), 1), ((33, 1), 1), ((31, 1), 1), ((27, 3), 1), ((27, 1), 1), ((26, 2), 1), ((14, 8), 1), ((12, 8), 1), ((10, 14), 1), ((8, 14), 1), ((1, 9), 1), ((1, 7), 1), ((32, 1), 1), ((30, 1), 1), ((27, 2), 1), ((28, 1), 1), ((27, 2), 1), ((25, 2), 1), ((13, 8), 1), ((11, 8), 1), ((8, 13), 1), ((9, 14), 1), ((1, 8), 1), ((2, 7), 1), ((31, 1), 1), ((29, 1), 1), ((29, 1), 1), ((27, 1), 1), ((26, 2), 1), ((24, 2), 1), ((11, 7), 1), ((12, 8), 1), ((8, 14), 1), ((8, 12), 1), ((3, 7), 1), ((1, 7), 1), ((30, 1), 1), ((28, 1), 1), ((25, 2), 1), ((23, 2), 1), ((11, 8), 1), ((11, 6), 1), ((8, 13), 1), ((8, 11), 1), ((4, 7), 1), ((2, 7), 1), ((24, 2), 1), ((22, 2), 1), ((11, 7), 1), ((10, 6), 1), ((8, 12), 1), ((8, 10), 1), ((4, 8), 1), ((3, 7), 1), ((23, 2), 1), ((21, 2), 1), ((11, 6), 1), ((9, 6), 1), ((8, 11), 1), ((8, 9), 1), ((4, 9), 1), ((4, 7), 1), ((22, 2), 1), ((20, 2), 1), ((10, 6), 1), ((8, 6), 1), ((8, 10), 1), ((8, 8), 1), ((4, 10), 1), ((4, 8), 1), ((21, 2), 1), ((19, 2), 1), ((9, 6), 1), ((7, 6), 1), ((8, 9), 1), ((7, 8), 1), ((4, 11), 1), ((4, 9), 1), ((3, 10), 1), ((20, 2), 1), ((18, 2), 1), ((8, 6), 1), ((6, 6), 1), ((8, 8), 1), ((6, 8), 1), ((4, 12), 1), ((4, 10), 1), ((4, 10), 1), ((19, 2), 1), ((17, 2), 1), ((6, 5), 1), ((7, 6), 1), ((6, 9), 1), ((7, 8), 1), ((4, 13), 1), ((4, 11), 1), ((18, 2), 1), ((16, 2), 1), ((6, 6), 1), ((5, 5), 1), ((6, 10), 1), ((6, 8), 1), ((4, 14), 1), ((4, 12), 1), ((17, 2), 1), ((15, 2), 1), ((6, 5), 1), ((4, 5), 1), ((6, 11), 1), ((6, 9), 1), ((4, 13), 1), ((5, 14), 1), ((15, 3), 1), ((16, 2), 1), ((14, 2), 1), ((5, 5), 1), ((3, 5), 1), ((6, 12), 1), ((6, 10), 1), ((6, 14), 1), ((4, 14), 1), ((15, 4), 1), ((15, 2), 1), ((15, 2), 1), ((13, 2), 1), ((4, 5), 1), ((2, 5), 1), ((6, 13), 1), ((6, 11), 1), ((6, 13), 1), ((5, 14), 1), ((15, 3), 1), ((16, 4), 1), ((14, 2), 1), ((12, 2), 1), ((3, 5), 1), ((1, 5), 1), ((6, 14), 1), ((6, 12), 1), ((17, 4), 1), ((15, 4), 1), ((13, 2), 1), ((11, 2), 1), ((1, 4), 1), ((2, 5), 1), ((18, 4), 1), ((16, 4), 1), ((12, 2), 1), ((10, 2), 1), ((1, 5), 1), ((1, 3), 1), ((19, 4), 1), ((17, 4), 1), ((10, 1), 1), ((11, 2), 1), ((1, 4), 1), ((2, 3), 1), ((19, 5), 1), ((20, 4), 1), ((18, 4), 1), ((10, 2), 1), ((9, 1), 1), ((3, 3), 1), ((1, 3), 1), ((19, 6), 1), ((19, 4), 1), ((21, 4), 1), ((19, 4), 1), ((10, 1), 1), ((8, 1), 1), ((4, 3), 1), ((2, 3), 1), ((19, 7), 1), ((19, 5), 1), ((18, 6), 1), ((21, 5), 1), ((20, 4), 1), ((9, 1), 1), ((7, 1), 1), ((5, 3), 1), ((3, 3), 1), ((19, 6), 1), ((20, 7), 1), ((19, 6), 1), ((17, 6), 1), ((21, 4), 1), ((22, 5), 1), ((8, 1), 1), ((6, 1), 1), ((6, 3), 1), ((4, 3), 1), ((21, 7), 1), ((19, 7), 1), ((18, 6), 1), ((16, 6), 1), ((23, 5), 1), ((21, 5), 1), ((7, 1), 1), ((5, 1), 1), ((7, 3), 1), ((5, 3), 1), ((22, 7), 1), ((20, 7), 1), ((17, 6), 1), ((15, 6), 1), ((24, 5), 1), ((22, 5), 1), ((6, 1), 1), ((4, 1), 1), ((8, 3), 1), ((6, 3), 1), ((23, 7), 1), ((21, 7), 1), ((16, 6), 1), ((14, 6), 1), ((24, 6), 1), ((23, 5), 1), ((5, 1), 1), ((3, 1), 1), ((8, 4), 1), ((7, 3), 1), ((24, 7), 1), ((22, 7), 1), ((15, 6), 1), ((13, 6), 1), ((24, 7), 1), ((24, 5), 1), ((4, 1), 1), ((2, 1), 1), ((8, 3), 1), ((9, 4), 1), ((24, 6), 1), ((23, 7), 1), ((13, 5), 1), ((14, 6), 1), ((3, 1), 1), ((1, 1), 1), ((10, 4), 1), ((8, 4), 1), ((13, 6), 1), ((13, 4), 1)]
*** PASS: test_cases\q3\ucs_1_problemC.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 68
*** 	nodes expanded:		269
[((34, 15), 5.820766091346741e-11), ((33, 16), 1.1641532182693481e-10), ((34, 16), 5.820766091346741e-11), ((34, 14), 5.820766091346741e-11), ((34, 15), 5.820766091346741e-11), ((33, 14), 1.1641532182693481e-10), ((34, 16), 5.820766091346741e-11), ((32, 16), 2.3283064365386963e-10), ((34, 14), 5.820766091346741e-11), ((32, 14), 2.3283064365386963e-10), ((33, 16), 1.1641532182693481e-10), ((31, 16), 4.656612873077393e-10), ((33, 14), 1.1641532182693481e-10), ((31, 14), 4.656612873077393e-10), ((32, 16), 2.3283064365386963e-10), ((30, 16), 9.313225746154785e-10), ((32, 14), 2.3283064365386963e-10), ((30, 14), 9.313225746154785e-10), ((31, 16), 4.656612873077393e-10), ((29, 16), 1.862645149230957e-09), ((30, 13), 9.313225746154785e-10), ((31, 14), 4.656612873077393e-10), ((30, 14), 9.313225746154785e-10), ((30, 12), 9.313225746154785e-10), ((30, 13), 9.313225746154785e-10), ((31, 12), 4.656612873077393e-10), ((32, 12), 2.3283064365386963e-10), ((30, 12), 9.313225746154785e-10), ((33, 12), 1.1641532182693481e-10), ((31, 12), 4.656612873077393e-10), ((34, 12), 5.820766091346741e-11), ((32, 12), 2.3283064365386963e-10), ((34, 11), 5.820766091346741e-11), ((33, 12), 1.1641532182693481e-10), ((34, 12), 5.820766091346741e-11), ((34, 10), 5.820766091346741e-11), ((34, 11), 5.820766091346741e-11), ((33, 10), 1.1641532182693481e-10), ((34, 10), 5.820766091346741e-11), ((32, 10), 2.3283064365386963e-10), ((33, 10), 1.1641532182693481e-10), ((31, 10), 4.656612873077393e-10), ((32, 10), 2.3283064365386963e-10), ((30, 10), 9.313225746154785e-10), ((30, 9), 9.313225746154785e-10), ((31, 10), 4.656612873077393e-10), ((29, 10), 1.862645149230957e-09), ((30, 10), 9.313225746154785e-10), ((30, 8), 9.313225746154785e-10), ((30, 9), 9.313225746154785e-10), ((31, 8), 4.656612873077393e-10), ((32, 8), 2.3283064365386963e-10), ((30, 8), 9.313225746154785e-10), ((33, 8), 1.1641532182693481e-10), ((31, 8), 4.656612873077393e-10), ((34, 8), 5.820766091346741e-11), ((32, 8), 2.3283064365386963e-10), ((34, 7), 5.820766091346741e-11), ((33, 8), 1.1641532182693481e-10), ((34, 8), 5.820766091346741e-11), ((34, 6), 5.820766091346741e-11), ((34, 7), 5.820766091346741e-11), ((33, 6), 1.1641532182693481e-10), ((34, 6), 5.820766091346741e-11), ((32, 6), 2.3283064365386963e-10), ((33, 6), 1.1641532182693481e-10), ((31, 6), 4.656612873077393e-10), ((32, 6), 2.3283064365386963e-10), ((30, 6), 9.313225746154785e-10), ((30, 5), 9.313225746154785e-10), ((31, 6), 4.656612873077393e-10), ((29, 6), 1.862645149230957e-09), ((30, 6), 9.313225746154785e-10), ((30, 4), 9.313225746154785e-10), ((30, 5), 9.313225746154785e-10), ((30, 3), 9.313225746154785e-10), ((31, 4), 4.656612873077393e-10), ((31, 3), 4.656612873077393e-10), ((32, 4), 2.3283064365386963e-10), ((30, 4), 9.313225746154785e-10), ((33, 4), 1.1641532182693481e-10), ((31, 4), 4.656612873077393e-10), ((34, 4), 5.820766091346741e-11), ((32, 4), 2.3283064365386963e-10), ((34, 3), 5.820766091346741e-11), ((33, 4), 1.1641532182693481e-10), ((34, 4), 5.820766091346741e-11), ((34, 2), 5.820766091346741e-11), ((34, 3), 5.820766091346741e-11), ((34, 1), 5.820766091346741e-11), ((34, 2), 5.820766091346741e-11), ((33, 1), 1.1641532182693481e-10), ((34, 1), 5.820766091346741e-11), ((32, 1), 2.3283064365386963e-10), ((33, 1), 1.1641532182693481e-10), ((31, 1), 4.656612873077393e-10), ((31, 4), 4.656612873077393e-10), ((30, 3), 9.313225746154785e-10), ((32, 1), 2.3283064365386963e-10), ((30, 1), 9.313225746154785e-10), ((30, 4), 9.313225746154785e-10), ((31, 3), 4.656612873077393e-10), ((31, 1), 4.656612873077393e-10), ((29, 1), 1.862645149230957e-09), ((30, 16), 9.313225746154785e-10), ((28, 16), 3.725290298461914e-09), ((30, 10), 9.313225746154785e-10), ((30, 6), 9.313225746154785e-10), ((30, 1), 9.313225746154785e-10), ((28, 1), 3.725290298461914e-09), ((29, 16), 1.862645149230957e-09), ((27, 16), 7.450580596923828e-09), ((29, 1), 1.862645149230957e-09), ((27, 1), 7.450580596923828e-09), ((28, 16), 3.725290298461914e-09), ((26, 16), 1.4901161193847656e-08), ((27, 2), 7.450580596923828e-09), ((28, 1), 3.725290298461914e-09), ((27, 3), 7.450580596923828e-09), ((27, 1), 7.450580596923828e-09), ((26, 2), 1.4901161193847656e-08), ((27, 4), 7.450580596923828e-09), ((27, 2), 7.450580596923828e-09), ((27, 5), 7.450580596923828e-09), ((27, 3), 7.450580596923828e-09), ((27, 6), 7.450580596923828e-09), ((27, 4), 7.450580596923828e-09), ((27, 7), 7.450580596923828e-09), ((27, 5), 7.450580596923828e-09), ((27, 8), 7.450580596923828e-09), ((27, 6), 7.450580596923828e-09), ((27, 9), 7.450580596923828e-09), ((27, 7), 7.450580596923828e-09), ((27, 8), 7.450580596923828e-09), ((26, 9), 1.4901161193847656e-08), ((27, 16), 7.450580596923828e-09), ((25, 16), 2.9802322387695312e-08), ((27, 2), 7.450580596923828e-09), ((25, 2), 2.9802322387695312e-08), ((27, 9), 7.450580596923828e-09), ((25, 9), 2.9802322387695312e-08), ((25, 15), 2.9802322387695312e-08), ((26, 16), 1.4901161193847656e-08), ((24, 16), 5.960464477539063e-08), ((26, 2), 1.4901161193847656e-08), ((24, 2), 5.960464477539063e-08), ((26, 9), 1.4901161193847656e-08), ((24, 9), 5.960464477539063e-08), ((25, 16), 2.9802322387695312e-08), ((25, 14), 2.9802322387695312e-08), ((25, 15), 2.9802322387695312e-08), ((26, 14), 1.4901161193847656e-08), ((27, 14), 7.450580596923828e-09), ((25, 14), 2.9802322387695312e-08), ((27, 13), 7.450580596923828e-09), ((26, 14), 1.4901161193847656e-08), ((27, 14), 7.450580596923828e-09), ((27, 12), 7.450580596923828e-09), ((27, 13), 7.450580596923828e-09), ((27, 11), 7.450580596923828e-09), ((27, 12), 7.450580596923828e-09), ((26, 11), 1.4901161193847656e-08), ((27, 11), 7.450580596923828e-09), ((25, 11), 2.9802322387695312e-08), ((26, 11), 1.4901161193847656e-08), ((24, 11), 5.960464477539063e-08), ((25, 16), 2.9802322387695312e-08), ((23, 16), 1.1920928955078125e-07), ((25, 2), 2.9802322387695312e-08), ((23, 2), 1.1920928955078125e-07), ((25, 9), 2.9802322387695312e-08), ((23, 9), 1.1920928955078125e-07), ((24, 12), 5.960464477539063e-08), ((25, 11), 2.9802322387695312e-08), ((24, 11), 5.960464477539063e-08), ((23, 12), 1.1920928955078125e-07), ((24, 16), 5.960464477539063e-08), ((22, 16), 2.384185791015625e-07), ((24, 2), 5.960464477539063e-08), ((22, 2), 2.384185791015625e-07), ((24, 9), 5.960464477539063e-08), ((22, 9), 2.384185791015625e-07), ((24, 12), 5.960464477539063e-08), ((22, 12), 2.384185791015625e-07), ((23, 16), 1.1920928955078125e-07), ((21, 16), 4.76837158203125e-07), ((23, 2), 1.1920928955078125e-07), ((21, 2), 4.76837158203125e-07), ((23, 9), 1.1920928955078125e-07), ((21, 9), 4.76837158203125e-07), ((23, 12), 1.1920928955078125e-07), ((21, 12), 4.76837158203125e-07), ((22, 16), 2.384185791015625e-07), ((20, 16), 9.5367431640625e-07), ((22, 2), 2.384185791015625e-07), ((20, 2), 9.5367431640625e-07), ((22, 9), 2.384185791015625e-07), ((20, 9), 9.5367431640625e-07), ((22, 12), 2.384185791015625e-07), ((20, 12), 9.5367431640625e-07), ((21, 16), 4.76837158203125e-07), ((19, 16), 1.9073486328125e-06), ((21, 2), 4.76837158203125e-07), ((19, 2), 1.9073486328125e-06), ((20, 10), 9.5367431640625e-07), ((21, 9), 4.76837158203125e-07), ((20, 11), 9.5367431640625e-07), ((21, 12), 4.76837158203125e-07), ((19, 12), 1.9073486328125e-06), ((20, 11), 9.5367431640625e-07), ((20, 9), 9.5367431640625e-07), ((20, 12), 9.5367431640625e-07), ((20, 10), 9.5367431640625e-07), ((19, 11), 1.9073486328125e-06), ((20, 16), 9.5367431640625e-07), ((18, 16), 3.814697265625e-06), ((20, 2), 9.5367431640625e-07), ((18, 2), 3.814697265625e-06), ((19, 11), 1.9073486328125e-06), ((20, 12), 9.5367431640625e-07), ((18, 12), 3.814697265625e-06), ((19, 12), 1.9073486328125e-06), ((20, 11), 9.5367431640625e-07), ((19, 16), 1.9073486328125e-06), ((17, 16), 7.62939453125e-06), ((19, 2), 1.9073486328125e-06), ((17, 2), 7.62939453125e-06), ((19, 12), 1.9073486328125e-06), ((17, 12), 7.62939453125e-06), ((18, 16), 3.814697265625e-06), ((16, 16), 1.52587890625e-05), ((18, 2), 3.814697265625e-06), ((16, 2), 1.52587890625e-05), ((17, 13), 7.62939453125e-06), ((18, 12), 3.814697265625e-06), ((16, 12), 1.52587890625e-05), ((17, 14), 7.62939453125e-06), ((17, 12), 7.62939453125e-06), ((17, 13), 7.62939453125e-06), ((16, 14), 1.52587890625e-05), ((17, 16), 7.62939453125e-06), ((15, 16), 3.0517578125e-05), ((17, 2), 7.62939453125e-06), ((15, 2), 3.0517578125e-05), ((17, 12), 7.62939453125e-06), ((15, 12), 3.0517578125e-05), ((17, 14), 7.62939453125e-06), ((15, 14), 3.0517578125e-05), ((16, 16), 1.52587890625e-05), ((14, 16), 6.103515625e-05), ((15, 3), 3.0517578125e-05), ((16, 2), 1.52587890625e-05), ((14, 2), 6.103515625e-05), ((16, 12), 1.52587890625e-05), ((14, 12), 6.103515625e-05), ((16, 14), 1.52587890625e-05), ((14, 14), 6.103515625e-05), ((15, 4), 3.0517578125e-05), ((15, 2), 3.0517578125e-05), ((15, 3), 3.0517578125e-05), ((16, 4), 1.52587890625e-05), ((17, 4), 7.62939453125e-06), ((15, 4), 3.0517578125e-05), ((18, 4), 3.814697265625e-06), ((16, 4), 1.52587890625e-05), ((19, 4), 1.9073486328125e-06), ((17, 4), 7.62939453125e-06), ((19, 5), 1.9073486328125e-06), ((20, 4), 9.5367431640625e-07), ((18, 4), 3.814697265625e-06), ((21, 4), 4.76837158203125e-07), ((19, 4), 1.9073486328125e-06), ((21, 5), 4.76837158203125e-07), ((20, 4), 9.5367431640625e-07), ((21, 4), 4.76837158203125e-07), ((22, 5), 2.384185791015625e-07), ((23, 5), 1.1920928955078125e-07), ((21, 5), 4.76837158203125e-07), ((24, 5), 5.960464477539063e-08), ((22, 5), 2.384185791015625e-07), ((24, 6), 5.960464477539063e-08), ((23, 5), 1.1920928955078125e-07), ((24, 7), 5.960464477539063e-08), ((24, 5), 5.960464477539063e-08), ((24, 6), 5.960464477539063e-08), ((23, 7), 1.1920928955078125e-07), ((24, 7), 5.960464477539063e-08), ((22, 7), 2.384185791015625e-07), ((23, 7), 1.1920928955078125e-07), ((21, 7), 4.76837158203125e-07), ((22, 7), 2.384185791015625e-07), ((20, 7), 9.5367431640625e-07), ((21, 7), 4.76837158203125e-07), ((19, 7), 1.9073486328125e-06), ((19, 6), 1.9073486328125e-06), ((19, 4), 1.9073486328125e-06), ((19, 6), 1.9073486328125e-06), ((20, 7), 9.5367431640625e-07), ((19, 7), 1.9073486328125e-06), ((19, 5), 1.9073486328125e-06), ((18, 6), 3.814697265625e-06), ((19, 6), 1.9073486328125e-06), ((17, 6), 7.62939453125e-06), ((18, 6), 3.814697265625e-06), ((16, 6), 1.52587890625e-05), ((17, 6), 7.62939453125e-06), ((15, 6), 3.0517578125e-05), ((16, 6), 1.52587890625e-05), ((14, 6), 6.103515625e-05), ((15, 16), 3.0517578125e-05), ((13, 16), 0.0001220703125), ((15, 2), 3.0517578125e-05), ((13, 2), 0.0001220703125), ((14, 11), 6.103515625e-05), ((15, 12), 3.0517578125e-05), ((13, 12), 0.0001220703125), ((15, 14), 3.0517578125e-05), ((13, 14), 0.0001220703125), ((15, 6), 3.0517578125e-05), ((13, 6), 0.0001220703125), ((14, 12), 6.103515625e-05), ((14, 10), 6.103515625e-05), ((14, 11), 6.103515625e-05), ((15, 10), 3.0517578125e-05), ((16, 10), 1.52587890625e-05), ((14, 10), 6.103515625e-05), ((17, 10), 7.62939453125e-06), ((15, 10), 3.0517578125e-05), ((17, 9), 7.62939453125e-06), ((16, 10), 1.52587890625e-05), ((17, 10), 7.62939453125e-06), ((17, 8), 7.62939453125e-06), ((17, 9), 7.62939453125e-06), ((16, 8), 1.52587890625e-05), ((17, 8), 7.62939453125e-06), ((15, 8), 3.0517578125e-05), ((16, 8), 1.52587890625e-05), ((14, 8), 6.103515625e-05), ((15, 8), 3.0517578125e-05), ((13, 8), 0.0001220703125), ((14, 16), 6.103515625e-05), ((12, 16), 0.000244140625), ((14, 2), 6.103515625e-05), ((12, 2), 0.000244140625), ((14, 12), 6.103515625e-05), ((12, 12), 0.000244140625), ((14, 14), 6.103515625e-05), ((12, 14), 0.000244140625), ((13, 5), 0.0001220703125), ((14, 6), 6.103515625e-05), ((14, 8), 6.103515625e-05), ((12, 8), 0.000244140625), ((13, 6), 0.0001220703125), ((13, 4), 0.0001220703125), ((13, 5), 0.0001220703125), ((12, 4), 0.000244140625), ((13, 16), 0.0001220703125), ((11, 16), 0.00048828125), ((13, 2), 0.0001220703125), ((11, 2), 0.00048828125), ((12, 13), 0.000244140625), ((12, 11), 0.000244140625), ((13, 12), 0.0001220703125), ((12, 13), 0.000244140625), ((13, 14), 0.0001220703125), ((13, 8), 0.0001220703125), ((11, 8), 0.00048828125), ((13, 4), 0.0001220703125), ((11, 4), 0.00048828125), ((12, 14), 0.000244140625), ((12, 12), 0.000244140625), ((12, 12), 0.000244140625), ((12, 10), 0.000244140625), ((12, 11), 0.000244140625), ((11, 10), 0.00048828125), ((12, 16), 0.000244140625), ((10, 16), 0.0009765625), ((12, 2), 0.000244140625), ((10, 2), 0.0009765625), ((11, 7), 0.00048828125), ((12, 8), 0.000244140625), ((12, 4), 0.000244140625), ((10, 4), 0.0009765625), ((12, 10), 0.000244140625), ((10, 10), 0.0009765625), ((11, 8), 0.00048828125), ((11, 6), 0.00048828125), ((11, 7), 0.00048828125), ((10, 6), 0.0009765625), ((11, 16), 0.00048828125), ((9, 16), 0.001953125), ((10, 1), 0.0009765625), ((11, 2), 0.00048828125), ((11, 4), 0.00048828125), ((9, 4), 0.001953125), ((10, 11), 0.0009765625), ((11, 10), 0.00048828125), ((11, 6), 0.00048828125), ((9, 6), 0.001953125), ((10, 2), 0.0009765625), ((9, 1), 0.001953125), ((10, 12), 0.0009765625), ((10, 10), 0.0009765625), ((10, 13), 0.0009765625), ((10, 11), 0.0009765625), ((10, 14), 0.0009765625), ((10, 12), 0.0009765625), ((10, 13), 0.0009765625), ((9, 14), 0.001953125), ((10, 16), 0.0009765625), ((8, 16), 0.00390625), ((10, 4), 0.0009765625), ((8, 4), 0.00390625), ((10, 6), 0.0009765625), ((8, 6), 0.00390625), ((10, 1), 0.0009765625), ((8, 1), 0.00390625), ((10, 14), 0.0009765625), ((8, 14), 0.00390625), ((9, 16), 0.001953125), ((7, 16), 0.0078125), ((8, 3), 0.00390625), ((9, 4), 0.001953125), ((9, 6), 0.001953125), ((7, 6), 0.0078125), ((9, 1), 0.001953125), ((7, 1), 0.0078125), ((8, 13), 0.00390625), ((9, 14), 0.001953125), ((8, 4), 0.00390625), ((7, 3), 0.0078125), ((8, 14), 0.00390625), ((8, 12), 0.00390625), ((8, 13), 0.00390625), ((8, 11), 0.00390625), ((8, 12), 0.00390625), ((8, 10), 0.00390625), ((8, 11), 0.00390625), ((8, 9), 0.00390625), ((8, 10), 0.00390625), ((8, 8), 0.00390625), ((8, 9), 0.00390625), ((7, 8), 0.0078125), ((8, 16), 0.00390625), ((6, 16), 0.015625), ((8, 6), 0.00390625), ((6, 6), 0.015625), ((8, 1), 0.00390625), ((6, 1), 0.015625), ((8, 3), 0.00390625), ((6, 3), 0.015625), ((8, 8), 0.00390625), ((6, 8), 0.015625), ((7, 16), 0.0078125), ((5, 16), 0.03125), ((6, 5), 0.015625), ((7, 6), 0.0078125), ((7, 1), 0.0078125), ((5, 1), 0.03125), ((7, 3), 0.0078125), ((5, 3), 0.03125), ((6, 9), 0.015625), ((7, 8), 0.0078125), ((6, 6), 0.015625), ((5, 5), 0.03125), ((6, 10), 0.015625), ((6, 8), 0.015625), ((6, 11), 0.015625), ((6, 9), 0.015625), ((6, 12), 0.015625), ((6, 10), 0.015625), ((6, 13), 0.015625), ((6, 11), 0.015625), ((6, 14), 0.015625), ((6, 12), 0.015625), ((6, 13), 0.015625), ((5, 14), 0.03125), ((6, 16), 0.015625), ((4, 16), 0.0625), ((6, 1), 0.015625), ((4, 1), 0.0625), ((6, 3), 0.015625), ((4, 3), 0.0625), ((6, 5), 0.015625), ((4, 5), 0.0625), ((6, 14), 0.015625), ((4, 14), 0.0625), ((5, 16), 0.03125), ((3, 16), 0.125), ((5, 1), 0.03125), ((3, 1), 0.125), ((5, 3), 0.03125), ((3, 3), 0.125), ((5, 5), 0.03125), ((3, 5), 0.125), ((4, 13), 0.0625), ((5, 14), 0.03125), ((4, 14), 0.0625), ((4, 12), 0.0625), ((4, 13), 0.0625), ((4, 11), 0.0625), ((4, 12), 0.0625), ((4, 10), 0.0625), ((4, 11), 0.0625), ((4, 9), 0.0625), ((3, 10), 0.125), ((4, 10), 0.0625), ((4, 8), 0.0625), ((4, 9), 0.0625), ((4, 7), 0.0625), ((4, 8), 0.0625), ((3, 7), 0.125), ((4, 16), 0.0625), ((2, 16), 0.25), ((4, 1), 0.0625), ((2, 1), 0.25), ((4, 3), 0.0625), ((2, 3), 0.25), ((4, 5), 0.0625), ((2, 5), 0.25), ((4, 10), 0.0625), ((4, 7), 0.0625), ((2, 7), 0.25), ((3, 16), 0.125), ((1, 16), 0.5), ((3, 1), 0.125), ((1, 1), 0.5), ((3, 3), 0.125), ((1, 3), 0.5), ((3, 5), 0.125), ((1, 5), 0.5), ((3, 7), 0.125), ((1, 7), 0.5), ((1, 15), 0.5), ((2, 16), 0.25)]
*** PASS: test_cases\q3\ucs_2_problemE.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 74
*** 	nodes expanded:		261
[((34, 15), 17179869184L), ((33, 16), 8589934592L), ((34, 16), 17179869184L), ((32, 16), 4294967296L), ((33, 16), 8589934592L), ((31, 16), 2147483648L), ((32, 16), 4294967296L), ((30, 16), 1073741824), ((31, 16), 2147483648L), ((29, 16), 536870912), ((30, 16), 1073741824), ((28, 16), 268435456), ((29, 16), 536870912), ((27, 16), 134217728), ((28, 16), 268435456), ((26, 16), 67108864), ((27, 16), 134217728), ((25, 16), 33554432), ((25, 15), 33554432), ((26, 16), 67108864), ((24, 16), 16777216), ((25, 16), 33554432), ((23, 16), 8388608), ((24, 16), 16777216), ((22, 16), 4194304), ((23, 16), 8388608), ((21, 16), 2097152), ((22, 16), 4194304), ((20, 16), 1048576), ((21, 16), 2097152), ((19, 16), 524288), ((20, 16), 1048576), ((18, 16), 262144), ((19, 16), 524288), ((17, 16), 131072), ((18, 16), 262144), ((16, 16), 65536), ((17, 16), 131072), ((15, 16), 32768), ((16, 16), 65536), ((14, 16), 16384), ((15, 16), 32768), ((13, 16), 8192), ((14, 16), 16384), ((12, 16), 4096), ((13, 16), 8192), ((11, 16), 2048), ((12, 16), 4096), ((10, 16), 1024), ((11, 16), 2048), ((9, 16), 512), ((10, 16), 1024), ((8, 16), 256), ((9, 16), 512), ((7, 16), 128), ((8, 16), 256), ((6, 16), 64), ((7, 16), 128), ((5, 16), 32), ((6, 16), 64), ((4, 16), 16), ((5, 16), 32), ((3, 16), 8), ((4, 16), 16), ((2, 16), 4), ((3, 16), 8), ((1, 16), 2), ((1, 15), 2), ((2, 16), 4), ((1, 16), 2), ((1, 14), 2), ((1, 15), 2), ((1, 13), 2), ((1, 14), 2), ((1, 12), 2), ((1, 13), 2), ((1, 11), 2), ((1, 12), 2), ((1, 10), 2), ((1, 11), 2), ((1, 9), 2), ((1, 10), 2), ((1, 8), 2), ((1, 9), 2), ((1, 7), 2), ((1, 8), 2), ((2, 7), 4), ((3, 7), 8), ((1, 7), 2), ((4, 7), 16), ((2, 7), 4), ((4, 8), 16), ((3, 7), 8), ((4, 9), 16), ((4, 7), 16), ((4, 10), 16), ((4, 8), 16), ((4, 11), 16), ((4, 9), 16), ((3, 10), 8), ((4, 10), 16), ((4, 12), 16), ((4, 10), 16), ((4, 13), 16), ((4, 11), 16), ((4, 14), 16), ((4, 12), 16), ((4, 13), 16), ((5, 14), 32), ((6, 14), 64), ((4, 14), 16), ((6, 13), 64), ((5, 14), 32), ((6, 14), 64), ((6, 12), 64), ((6, 13), 64), ((6, 11), 64), ((6, 12), 64), ((6, 10), 64), ((6, 11), 64), ((6, 9), 64), ((6, 10), 64), ((6, 8), 64), ((6, 9), 64), ((7, 8), 128), ((8, 8), 256), ((6, 8), 64), ((8, 9), 256), ((7, 8), 128), ((8, 10), 256), ((8, 8), 256), ((8, 11), 256), ((8, 9), 256), ((8, 12), 256), ((8, 10), 256), ((8, 13), 256), ((8, 11), 256), ((8, 14), 256), ((8, 12), 256), ((8, 13), 256), ((9, 14), 512), ((10, 14), 1024), ((8, 14), 256), ((10, 13), 1024), ((9, 14), 512), ((10, 14), 1024), ((10, 12), 1024), ((10, 13), 1024), ((10, 11), 1024), ((10, 12), 1024), ((10, 10), 1024), ((10, 11), 1024), ((11, 10), 2048), ((12, 10), 4096), ((10, 10), 1024), ((12, 11), 4096), ((11, 10), 2048), ((12, 12), 4096), ((12, 10), 4096), ((12, 13), 4096), ((12, 11), 4096), ((13, 12), 8192), ((12, 14), 4096), ((12, 12), 4096), ((12, 13), 4096), ((13, 14), 8192), ((14, 12), 16384), ((12, 12), 4096), ((14, 14), 16384), ((12, 14), 4096), ((14, 11), 16384), ((15, 12), 32768), ((13, 12), 8192), ((15, 14), 32768), ((13, 14), 8192), ((14, 12), 16384), ((14, 10), 16384), ((14, 11), 16384), ((15, 10), 32768), ((16, 12), 65536), ((14, 12), 16384), ((16, 14), 65536), ((14, 14), 16384), ((16, 10), 65536), ((14, 10), 16384), ((17, 12), 131072), ((15, 12), 32768), ((17, 14), 131072), ((15, 14), 32768), ((17, 10), 131072), ((15, 10), 32768), ((17, 13), 131072), ((18, 12), 262144), ((16, 12), 65536), ((17, 13), 131072), ((16, 14), 65536), ((17, 9), 131072), ((16, 10), 65536), ((17, 14), 131072), ((17, 12), 131072), ((17, 10), 131072), ((17, 8), 131072), ((17, 9), 131072), ((16, 8), 65536), ((17, 8), 131072), ((15, 8), 32768), ((16, 8), 65536), ((14, 8), 16384), ((15, 8), 32768), ((13, 8), 8192), ((14, 8), 16384), ((12, 8), 4096), ((13, 8), 8192), ((11, 8), 2048), ((11, 7), 2048), ((12, 8), 4096), ((11, 8), 2048), ((11, 6), 2048), ((11, 7), 2048), ((10, 6), 1024), ((11, 6), 2048), ((9, 6), 512), ((10, 6), 1024), ((8, 6), 256), ((9, 6), 512), ((7, 6), 128), ((8, 6), 256), ((6, 6), 64), ((6, 5), 64), ((7, 6), 128), ((6, 6), 64), ((5, 5), 32), ((6, 5), 64), ((4, 5), 16), ((5, 5), 32), ((3, 5), 8), ((4, 5), 16), ((2, 5), 4), ((3, 5), 8), ((1, 5), 2), ((1, 4), 2), ((2, 5), 4), ((1, 5), 2), ((1, 3), 2), ((1, 4), 2), ((2, 3), 4), ((3, 3), 8), ((1, 3), 2), ((4, 3), 16), ((2, 3), 4), ((5, 3), 32), ((3, 3), 8), ((6, 3), 64), ((4, 3), 16), ((7, 3), 128), ((5, 3), 32), ((8, 3), 256), ((6, 3), 64), ((8, 4), 256), ((7, 3), 128), ((8, 3), 256), ((9, 4), 512), ((10, 4), 1024), ((8, 4), 256), ((11, 4), 2048), ((9, 4), 512), ((12, 4), 4096), ((10, 4), 1024), ((13, 4), 8192), ((11, 4), 2048), ((13, 5), 8192), ((12, 4), 4096), ((13, 6), 8192), ((13, 4), 8192), ((13, 5), 8192), ((14, 6), 16384), ((15, 6), 32768), ((13, 6), 8192), ((16, 6), 65536), ((14, 6), 16384), ((17, 6), 131072), ((15, 6), 32768), ((18, 6), 262144), ((16, 6), 65536), ((19, 12), 524288), ((17, 12), 131072), ((19, 6), 524288), ((17, 6), 131072), ((19, 11), 524288), ((20, 12), 1048576), ((18, 12), 262144), ((19, 7), 524288), ((19, 5), 524288), ((18, 6), 262144), ((19, 12), 524288), ((20, 11), 1048576), ((19, 6), 524288), ((20, 7), 1048576), ((19, 6), 524288), ((19, 4), 524288), ((19, 5), 524288), ((20, 4), 1048576), ((18, 4), 262144), ((19, 4), 524288), ((17, 4), 131072), ((18, 4), 262144), ((16, 4), 65536), ((17, 4), 131072), ((15, 4), 32768), ((15, 3), 32768), ((16, 4), 65536), ((15, 4), 32768), ((15, 2), 32768), ((15, 3), 32768), ((16, 2), 65536), ((14, 2), 16384), ((15, 2), 32768), ((13, 2), 8192), ((14, 2), 16384), ((12, 2), 4096), ((13, 2), 8192), ((11, 2), 2048), ((12, 2), 4096), ((10, 2), 1024), ((10, 1), 1024), ((11, 2), 2048), ((10, 2), 1024), ((9, 1), 512), ((10, 1), 1024), ((8, 1), 256), ((9, 1), 512), ((7, 1), 128), ((8, 1), 256), ((6, 1), 64), ((7, 1), 128), ((5, 1), 32), ((6, 1), 64), ((4, 1), 16), ((5, 1), 32), ((3, 1), 8), ((4, 1), 16), ((2, 1), 4), ((3, 1), 8), ((1, 1), 2)]
*** PASS: test_cases\q3\ucs_3_problemW.test
*** 	pacman layout:		mediumMaze
*** 	solution length: 152
*** 	nodes expanded:		168
[(((3, 3), <game.Grid instance at 0x00000000023F6588>), 1), (((1, 3), <game.Grid instance at 0x00000000023F64C8>), 1), (((3, 2), <game.Grid instance at 0x00000000023F6448>), 1), (((2, 3), <game.Grid instance at 0x00000000023F6A88>), 1), (((2, 3), <game.Grid instance at 0x00000000023F6888>), 1), (((3, 3), <game.Grid instance at 0x00000000023F6908>), 1), (((3, 1), <game.Grid instance at 0x00000000023F6848>), 1), (((3, 3), <game.Grid instance at 0x00000000023F6788>), 1), (((1, 3), <game.Grid instance at 0x00000000023F69C8>), 1), (((3, 2), <game.Grid instance at 0x00000000023F3A48>), 1), (((2, 1), <game.Grid instance at 0x00000000023F3C48>), 1), (((3, 2), <game.Grid instance at 0x0000000002737EC8>), 1), (((2, 3), <game.Grid instance at 0x0000000002732288>), 1), (((3, 1), <game.Grid instance at 0x0000000002732308>), 1), (((1, 1), <game.Grid instance at 0x00000000027323C8>), 1), (((3, 3), <game.Grid instance at 0x0000000002732548>), 1), (((3, 1), <game.Grid instance at 0x000000000273E248>), 1), (((2, 1), <game.Grid instance at 0x000000000273ED88>), 1), (((3, 2), <game.Grid instance at 0x000000000274AF48>), 1), (((2, 1), <game.Grid instance at 0x000000000274D4C8>), 1), (((3, 1), <game.Grid instance at 0x000000000274D688>), 1), (((1, 1), <game.Grid instance at 0x000000000274D888>), 1), (((3, 1), <game.Grid instance at 0x000000000274DA48>), 1), (((1, 1), <game.Grid instance at 0x000000000274DC08>), 1), (((3, 2), <game.Grid instance at 0x000000000274DDC8>), 1), (((2, 1), <game.Grid instance at 0x000000000274DFC8>), 1)]
*** PASS: test_cases\q3\ucs_4_testSearch.test
*** 	pacman layout:		testSearch
*** 	solution length: 7
*** 	nodes expanded:		14
[('G', 10.0), ('B', 1.0), ('C', 1.0), ('G', 1.0)]
*** PASS: test_cases\q3\ucs_5_goalAtDequeue.test
*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** Tests failed.

### Question q3: 0/3 ###


Question q4
===========

*** FAIL: test_cases\q4\astar_0.test
*** 	graph:
*** 	              C
*** 	              ^
*** 	              | 2
*** 	         2    V   4 
*** 	    *A <----> B -----> [H]
*** 	              | 
*** 	         1.5  V  2.5
*** 	     G <----- D -----> E
*** 	              |
*** 	            2 | 
*** 	              V
*** 	             [F]
*** 	    
*** 	    A is the start state, F and H is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	student solution:		['Right', 'Down', 'Down']
*** 	student expanded_states:	['A', 'B', 'D', 'G', 'C']
*** 
*** 	correct solution:		['Right', 'Down', 'Down']
*** 	correct expanded_states:	['A', 'B', 'D', 'C', 'G']
*** 	correct rev_solution:		['Right', 'Down', 'Down']
*** 	correct rev_expanded_states:	['A', 'B', 'D', 'C', 'G']
*** FAIL: test_cases\q4\astar_1_graph_heuristic.test
*** 	graph:
*** 	         2     3     2
*** 	      S --- A --- C ---> G
*** 	      | \       /       ^
*** 	    3 |  \ 5   / 1     / 
*** 	      |   \   /       / 
*** 	      B --- D -------/
*** 	         4         5  
*** 	    
*** 	    S is the start state, G is the goal.  Arrows mark possible state 
*** 	    transitions.  The number next to the arrow is the cost of that transition.
*** 	    
*** 	    The heuristic value of each state is:
*** 	    	S 6.0
*** 	    	A 2.5
*** 	    	B 5.25
*** 	    	C 1.125
*** 	    	D 1.0625
*** 	    	G 0
*** 	student solution:		['0', '0', '2']
*** 	student expanded_states:	['S', 'A', 'B', 'C', 'D']
*** 
*** 	correct solution:		['0', '0', '2']
*** 	correct expanded_states:	['S', 'A', 'D', 'C']
*** 	correct rev_solution:		['0', '0', '2']
*** 	correct rev_expanded_states:	['S', 'A', 'D', 'C']
*** FAIL: test_cases\q4\astar_2_manhattan.test
*** Too many node expanded; are you expanding nodes twice?
*** 	student nodes expanded: 269
*** 
*** 	correct nodes expanded: 221 (leewayFactor 1.1)
*** PASS: test_cases\q4\astar_3_goalAtDequeue.test
*** 	solution:		['1:A->B', '0:B->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C']
*** PASS: test_cases\q4\graph_backtrack.test
*** 	solution:		['1:A->C', '0:C->G']
*** 	expanded_states:	['A', 'B', 'C', 'D']
*** PASS: test_cases\q4\graph_manypaths.test
*** 	solution:		['1:A->C', '0:C->D', '1:D->F', '0:F->G']
*** 	expanded_states:	['A', 'B1', 'C', 'B2', 'D', 'E1', 'F', 'E2']
*** Tests failed.

### Question q4: 0/3 ###


Question q5
===========

*** Method not implemented: getStartState at line 299 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q5: 0/3 ###


Question q6
===========

*** NOTE: Make sure to complete Question q4 before working on Question q6,
*** because Question q6 builds upon your answer for Question q4.


Question q7
===========

*** NOTE: Make sure to complete Question q4 before working on Question q7,
*** because Question q7 builds upon your answer for Question q4.


Question q8
===========

[SearchAgent] using function depthFirstSearch
[SearchAgent] using problem type PositionSearchProblem
*** Method not implemented: findPathToClosestDot at line 489 of searchAgents.py
*** FAIL: Terminated with a string exception.

### Question q8: 0/3 ###


Finished at 4:40:20

Provisional grades
==================
Question q1: 3/3
Question q2: 3/3
Question q3: 0/3
Question q4: 0/3
Question q5: 0/3
Question q6: 0/3
Question q7: 0/4
Question q8: 0/3
------------------
Total: 6/25

Your grades are NOT yet registered.  To register your grades, make sure
to follow your instructor's guidelines to receive credit on your project.

